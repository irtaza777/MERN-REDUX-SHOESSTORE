// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserReg {
  id        Int      @id @default(autoincrement()) // Unique identifier with auto-increment
  name      String   @db.VarChar(100)              // Name field with validation for max length
  email     String   @unique                       // Email must be unique
  password  String   @db.VarChar(255)              // Password field (hashed)
  province  String   @db.VarChar(100)              // Province of the user
  city      String   @db.VarChar(100)              // City of the user
  mobile    String   @db.VarChar(20)               // Mobile number
  address   String   @db.VarChar(255)              // Address of the user
  createdAt DateTime @default(now())               // Automatically set creation time
  updatedAt DateTime @updatedAt                    // Automatically set update time
  cart      Cart?
}

model Cart {
  id        Int       @id @default(autoincrement())
  user      UserReg   @relation(fields: [userId], references: [id]) // Reference to UserReg model
  userId    Int       @unique
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String?   // Make imageUrl optional
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  brand       Brand         @relation(fields: [brandId], references: [id])
  brandId     Int
  sizes       ShoeSize[]
  colors      ProductColor[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ShoeSize {
  id         Int        @id @default(autoincrement())
  size       Float
  stock      Int        // Stock specific to this size
  product    Product    @relation(fields: [productId], references: [id])
  productId  Int
  cartItems  CartItem[] // Back-reference to CartItem
  orderItems OrderItem[] // Back-reference to OrderItem
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  size      ShoeSize  @relation(fields: [sizeId], references: [id])
  sizeId    Int
  quantity  Int?      // Made quantity optional
  price     Float
  color     String
  imageUrl  String
  createdAt DateTime  @default(now())
}

model Order {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  items     OrderItem[]
  total     Float
  status    String    @default("pending") // e.g., pending, shipped, delivered
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  size      ShoeSize  @relation(fields: [sizeId], references: [id])
  sizeId    Int
  quantity  Int
  price     Float     // Price at the time of purchase
  createdAt DateTime  @default(now())
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  ProductColor[]
}

model ProductColor {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  color     Color     @relation(fields: [colorId], references: [id])
  colorId   Int
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
